{"version":3,"sources":["App.js","rootReducer.js","combineReducers.js","serviceWorker.js","index.js"],"names":["Option","Select","Content","Layout","Item","Form","networkConfigs","1","polymathRegistryAddress","42","15","message","config","duration","maxCount","formItemLayout","labelCol","xs","span","sm","wrapperCol","App","useContext","Store","state","dispatch","AppReducer","sdk","loading","loadingMessage","reservations","walletAddress","useState","formSymbolValue","setFormSymbolValue","form","useForm","getFieldDecorator","resetFields","setFieldsValue","validateFields","a","type","reserveSecurityToken","symbol","q","run","ret","console","log","error","e","preventDefault","force","then","values","reservation","filter","r","createSecurityToken","hasErrors","getFieldsError","useEffect","browserUtils","getNetworkId","networkId","getCurrentAddress","includes","Polymath","connect","init","getSecurityTokenReservations","owner","isLaunched","launched","undefined","fetchReservations","spinning","tip","size","style","padding","backgroundColor","placeholder","value","onChange","target","RegExp","test","length","toUpperCase","onClick","onSubmit","name","label","rules","required","map","key","help","max","initialValue","valuePropName","htmlType","rootReducer","reducers","action","hasChanged","nextState","Object","keys","reduce","result","combineReducers","Error","Boolean","window","location","hostname","match","initialState","createContext","ReactDOM","render","store","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ff46cc2.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { Store } from './index'\nimport { Polymath, browserUtils } from '@polymathnetwork/sdk'\nimport { Layout, Spin, Form, Input, Button, Divider, Select, Switch, message } from 'antd'\nimport useForm from 'rc-form-hooks'\nimport { filter } from 'p-iteration'\n\nconst { Option } = Select\nconst { Content } = Layout\nconst { Item } = Form\nconst networkConfigs = {\n  1: {\n    polymathRegistryAddress: '0xdfabf3e4793cd30affb47ab6fa4cf4eef26bbc27'\n  },\n  42: {\n    polymathRegistryAddress: '0x5b215a7d39ee305ad28da29bf2f0425c6c2a00b3'\n  },\n  15: {\n    polymathRegistryAddress: '0x9FBDa871d559710256a2502A2517b794B482Db40'\n  }\n}\n\nmessage.config({\n  duration: 5000,\n  maxCount: 1,\n})\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n}\n\nexport const reducer = (state, action) => {\n  console.log('ACTION', action)\n  switch (action.type) {\n  case 'INITALIZING':\n    return {\n      ...state,\n      loading: true,\n      loadingMessage: 'Initializing Polymath SDK',\n      error: undefined,\n    }\n  case 'INITIALIZED':\n    const { sdk, networkId, walletAddress } = action\n    return {\n      ...state,\n      loading: false,\n      loadingMessage: '',\n      error: undefined,\n      sdk,\n      networkId,\n      walletAddress\n    }\n  case 'FETCHING_RESERVATIONS':\n    return {\n      ...state,\n      loading: true,\n      loadingMessage: 'Fetching your previously reserved symbols',\n      error: undefined,\n    }\n  case 'RESERVING_SYMBOL':\n    return {\n      ...state,\n      loading: true,\n      loadingMessage: 'Reserving symbol'\n    }\n  case 'RESERVED_SYMBOL':\n    return {\n      ...state,\n      loading: true,\n      reservations: undefined,\n      loadingMessage: 'Refreshing reservations',\n    }\n  case 'CREATING_TOKEN':\n    return {\n      ...state,\n      loading: true,\n      loadingMessage: 'Creating token'\n    }\n  case 'CREATED_TOKEN':\n    return {\n      ...state,\n      loading: true,\n      reservations: undefined,\n      loadingMessage: 'Refreshing reservations',\n    }\n  case 'FETCHED_RESERVATIONS':\n    const { reservations } = action\n    return {\n      ...state,\n      loading: false,\n      loadingMessage: '',\n      error: undefined,\n      reservations\n    }\n  case 'ERROR':\n    const { error } = action\n    return {\n      ...state,\n      loading: false,\n      loadingMessage: '',\n      error,\n    }\n  default:\n    throw new Error(`Unrecognized action type: ${action.type}`)\n  }\n\n}\n\nfunction App() {\n  const [state, dispatch] = useContext(Store)\n  const { sdk, loading, loadingMessage, reservations, walletAddress } = state.AppReducer\n  const [ formSymbolValue, setFormSymbolValue ] = useState('')\n\n  const form = useForm()\n  const { getFieldDecorator, setFieldsValue, resetFields, validateFields, hasErrors, getFieldsError } = form\n  // Initialize the SDK.\n  useEffect(() => {\n    async function init() {\n      dispatch({type: 'INITALIZING'})\n\n      try {\n        const networkId = await browserUtils.getNetworkId()\n        const walletAddress = await browserUtils.getCurrentAddress()\n        if (![-1, 1, 42].includes(networkId)) {\n          dispatch({\n            type: 'ERROR',\n            error: 'Please switch to either Main or Kovan network'\n          })\n          return\n        }\n\n        const config = networkConfigs[networkId]\n        const sdk = new Polymath()\n        await sdk.connect(config)\n        dispatch({\n          type: 'INITIALIZED',\n          networkId,\n          sdk,\n          walletAddress,\n        })\n      }\n      catch(error) {\n        dispatch({\n          type: 'ERROR',\n          error: error.message\n        })\n      }\n    }\n    if (!sdk) {\n      init()\n    }\n  }, [dispatch, sdk])\n\n  // Fetch previous reservations if any.\n  useEffect(() => {\n    async function fetchReservations() {\n      dispatch({ type: 'FETCHING_RESERVATIONS' })\n      try {\n        let reservations = await sdk.getSecurityTokenReservations({owner: walletAddress })\n        console.log('All reservations', reservations)\n        reservations = await filter(reservations, async (reservation) => {\n          const launched = await reservation.isLaunched()\n          return !launched\n        })\n        console.log('Not launched reservations', reservations)\n        dispatch({type: 'FETCHED_RESERVATIONS', reservations})\n      } catch (error) {\n        dispatch({type: 'ERROR', error: error.message})\n      }\n    }\n    if (sdk && walletAddress && reservations === undefined) {\n      fetchReservations()\n    }\n  }, [dispatch, reservations, sdk, walletAddress])\n\n  // @TODO refactor into an effect\n  async function reserveSymbol() {\n    if (formSymbolValue) {\n      dispatch({type: 'RESERVING_SYMBOL'})\n      try {\n        const q = await sdk.reserveSecurityToken({symbol: formSymbolValue})\n        const ret = await q.run()\n        console.log('ret', ret)\n        dispatch({type: 'RESERVED_SYMBOL'})\n      } catch (error) {\n        dispatch({type: 'ERROR', error: error.message})\n        message.error(error.message)\n      }\n    } else {\n      message.error('Please provide a symbol')\n    }\n  }\n\n  async function createToken(e) {\n    e.preventDefault()\n    const fields = ['symbol', 'name', 'detailsUrl', 'treasuryWallet', 'divisible']\n    validateFields(fields, { force: true })\n      .then(async (values) => {\n        dispatch({type: 'CREATING_TOKEN'})\n        console.log('Submitted values', values)\n        const reservation = reservations.filter(r => r.symbol === values.symbol)[0]\n        console.log(reservation)\n\n        try {\n          const q = await reservation.createSecurityToken(values)\n          const ret = await q.run()\n          console.log(ret)\n          dispatch({ type: 'CREATED_TOKEN'})\n          resetFields()\n        }\n        catch (error) {\n          dispatch({ type: 'ERROR',\n            error: error.message} )\n        }\n      })\n  }\n\n  return (\n    <div>\n      <Spin spinning={loading} tip={loadingMessage} size=\"large\">\n        <Layout>\n          <Content style={{\n            padding: 50,\n            backgroundColor: '#FAFDFF'\n          }}>\n            <Form {...formItemLayout}>\n              <Item>\n                <Input\n                  placeholder=\"SYMBOL\"\n                  value={formSymbolValue}\n                  onChange={({ target: { value }}) => {\n                    const pattern = RegExp('^[a-zA-Z0-9_-]*$')\n                    if (pattern.test(value) && value.length <= 10) {\n                      setFormSymbolValue(value.toUpperCase())\n                    }\n                  }}\n                />\n              </Item>\n              <Button type=\"primary\" onClick={reserveSymbol}>Reserve Symbol</Button>\n            </Form>\n\n            <Divider />\n\n            {reservations &&\n              <Form\n                {...formItemLayout}\n                onSubmit={createToken}>\n                <Item\n                  name=\"symbol\"\n                  label=\"Reservation\">\n                  {getFieldDecorator('symbol', {\n                    rules: [{required: true, message: 'A token reservation is required'}],\n                  })(<Select\n                    placeholder=\"Select a reservation\">\n                    {reservations.map(({symbol}) =>\n                      <Option key={symbol} value={symbol}>{symbol}</Option> )}\n                  </Select>)}\n                </Item>\n                <Item\n                  name=\"name\"\n                  label=\"Token Name\"\n                  help=\"This is the name of your token for display purposes. For example: Toro Token\">\n                  {getFieldDecorator('name', {\n                    rules: [{required: true, message: 'Token name is required'}, {max: 64}],\n                  })(<Input placeholder=\"Enter Token Name\"/>)}\n                </Item>\n                <Item\n                  name=\"detailsUrl\"\n                  label=\"Token Details\"\n                  help=\"This is the name of your token for display purposes. For example: Toro Token\">\n                  {getFieldDecorator('detailsUrl', {initialValue: ''})(<Input placeholder=\"Paste link here\"/>)}\n                </Item>\n                <Item\n                  name=\"treasuryWallet\"\n                  label=\"Treasury Wallet Address\"\n                  help=\"Address of a wallet to be used to store tokens for some operations. Defaults to current user (eg Token Issuer) address\">\n                  {getFieldDecorator('treasuryWallet', {initialValue: walletAddress, rules: [{max: 64}] })(<Input />)}\n                </Item>\n                <Item\n                  name=\"divisible\"\n                  label=\"Divisible\"\n                  help=\"Paste a link to a web page that includes additional information on your token, such as legend.\">\n                  {getFieldDecorator('divisible', {\n                    initialValue: false,\n                    valuePropName: 'checked',\n                  })(<Switch />)}\n                </Item>\n                <Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Create my token\n                  </Button>\n                </Item>\n              </Form>\n            }\n          </Content>\n        </Layout>\n      </Spin>\n    </div>\n  )\n}\n\nexport default App\n","import combineReducers from './combineReducers'\nimport { reducer as AppReducer } from './App'\nconst rootReducer = combineReducers({AppReducer})\n\nexport default rootReducer","/**\n * @see https://codesandbox.io/s/rm7587n34m?from-embed\n *\n * A size-optimized refactor of Redux's combineReducers.\n * All safeguards removed. Use at your own risk.\n * https://github.com/reduxjs/redux/blob/master/src/combineReducers.js\n */\n\nconst combineReducers = reducers => (state, action) => {\n  let hasChanged\n  const nextState = Object.keys(reducers).reduce((result, key) => {\n    result[key] = reducers[key](state[key], action)\n    hasChanged = hasChanged || result[key] !== state[key]\n    return result\n  }, {})\n  return hasChanged ? nextState : state\n}\n\nexport default combineReducers\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {createContext, useReducer} from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport rootReducer from './rootReducer'\nimport * as serviceWorker from './serviceWorker'\n\nconst initialState = {\n  AppReducer: {\n    sdk: undefined,\n    loading: false,\n    loadingMessage: '',\n    error: undefined,\n    networkId: -1,\n    walletAddress: '',\n    reservations: undefined\n  }\n}\n\nexport const Store = createContext()\nconst WrappedApp = () => {\n  const store = useReducer(rootReducer, initialState)\n  return (<Store.Provider value={store}><App /></Store.Provider>)\n}\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}